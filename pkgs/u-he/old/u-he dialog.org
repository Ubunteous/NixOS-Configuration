#+title: u-he dialog

The following worked on NixOS 22.11

* Problem and Diagnostic

u-he plugins cannot be installed with install.sh. It is possible to manually move the plugin to its expected location ~/.u-he and ~/.vst (or vst and clap). However, it won't be possible to create/interact with the pop up windows spawned by the plugin (credentials, options in the cogwheel menu and drop down menus).

The issue comes from the .dialog file in the plugin folder as NixOS won't use bash or libraries it requires to display responsive popup windows / dropdown menus.

Use ldd/ldd-tree in the plugin's folder to find the missing libraries

#+begin_src shell
ldd ./dialog.64 # lddtree seems better
#+end_src

The output should look like this and highlight missing libraries

#+begin_src
linux-vdso.so.1 (0x00007ffca349d000)
libgtk-3.so.0 => not found
libgobject-2.0.so.0 => not found
libglib-2.0.so.0 => not found
libc.so.6 => /nix/store/vnwdak3n1w2jjil119j65k8mw1z23p84-glibc-2.35-224/lib/libc.so.6 (0x00007fe05b800000)
/lib64/ld-linux-x86-64.so.2 => /nix/store/vnwdak3n1w2jjil119j65k8mw1z23p84-glibc-2.35-224/lib64/ld-linux-x86-64.so.2 (0x00007fe05ba76000)
#+end_src

* Installation

You will need to replace the first line of the installation script and the dialog script in the plugin's folder.

This will let NixOS know it needs bash to interpret the script.

#+begin_src
# comment this
# #! /bin/bash -e

# use this instead
#! /usr/bin/env bash
#+end_src

You can then install the software by running install.sh

* Running
** steam-run

There are multiple ways to provide libraries to a software.

The simplest one consists in using steam-run. This is not optimal as steam-run provides way more libraries than what we actually need.

#+begin_src
# replace reaper by your daw of choice
steam-run reaper
#+end_src

** nix-ld

A better alternative consists in using steam-ld in a nix shell

You will need the following nix shell to provide the missing libraries to the plugin:

#+begin_src
# shell.nix
with import <nixpkgs> {};
mkShell {
  NIX_LD_LIBRARY_PATH = lib.makeLibraryPath [
    gtk3
    glib
  ];
  NIX_LD = lib.fileContents "${stdenv.cc}/nix-support/dynamic-linker";
}
#+end_src

Note that for older NixOS versions (before 23.05), nix-ld must be installed with a flake containing:

#+begin_src
inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-22.11";

    nix-ld = {
      url = "github:Mic92/nix-ld";
      inputs.nixpkgs.follows = "nixpkgs";
    };
};
  
outputs = { self, nixpkgs, nix-ld }:
{
    modules =
    [    
              
         # ld will be fully available in NixOS 23.05
         nix-ld.nixosModules.nix-ld

         # The module in this repository defines a new module under (programs.nix-ld.dev) instead of (programs.nix-ld) 
         # to not collide with the nixpkgs version.
         { programs.nix-ld.dev.enable = true; }
    ];
}
#+end_src

Starting from NixOS version 23.05, the following line of code may be all you need in your NixOS configuration to get access to nix-ld (untested as I am still on version 22.11)

#+begin_src
programs.nix-ld = true;
#+end_src


With nix-ld, you can now use the script provided at the beginning of this section to provide the libraries required by u-he plugins to your daw

#+begin_src
# replace reaper by your daw of choice
nix-shell /path/to/shell.nix --run reaper
#+end_src

Your daw should start and u-he plugins will let you interact with all the popups menus generated by .dialog / .dialog.64

* Old

#! /usr/bin/env bash  => dialog and install script

DIALOG="$(readlink -f $0)"

if [[ "$(uname -m)" = x86_64 ]]; then
  DIALOG="$DIALOG.64"
else
  DIALOG="$DIALOG.32"
fi

unset LD_LIBRARY_PATH

export GDK_BACKEND=x11
exec "$DIALOG" "$@"

# exec 'nix-shell --run "$DIALOG" "$@"'
# exec 'nix-shell -i bash "$DIALOG" "$@"'

# steam-run "$DIALOG" "$@" # this works but is a dirty fix

# OPTIONS:
# + steam-run: works but dirty
# + nix-ld

# In Vanilla nix, we get the following errors.
# Try steam-run and (auto)patchelf to fix this mess
# libgtk-3.so.0 => not found
# libgobject-2.0.so.0 => not found
# libglib-2.0.so.0 => not found
